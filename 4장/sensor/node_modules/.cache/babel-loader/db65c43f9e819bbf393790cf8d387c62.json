{"remainingRequest":"/Users/juhongchul/Desktop/개발/MEVN/4장/sensor/node_modules/babel-loader/lib/index.js!/Users/juhongchul/Desktop/개발/MEVN/4장/sensor/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/juhongchul/Desktop/개발/MEVN/4장/sensor/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/juhongchul/Desktop/개발/MEVN/4장/sensor/src/views/Map.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/juhongchul/Desktop/개발/MEVN/4장/sensor/src/views/Map.vue","mtime":1566693104531},{"path":"/Users/juhongchul/Desktop/개발/MEVN/4장/sensor/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/juhongchul/Desktop/개발/MEVN/4장/sensor/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/juhongchul/Desktop/개발/MEVN/4장/sensor/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/juhongchul/Desktop/개발/MEVN/4장/sensor/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\nimport * as d3 from 'd3';\nimport * as topojson from 'topojson';\nexport default {\n  name: 'Map',\n  mounted: function mounted() {\n    this.draw();\n  },\n  methods: {\n    draw: function draw() {\n      var koreaMap = require(\"../assets/skorea-provinces-2018-topo-simple.json\");\n\n      var _map = topojson.feature(koreaMap, koreaMap.objects.skorea_provinces_2018_geo);\n\n      var width = 300;\n      var height = 400;\n      var svg = d3.select('.d3').append('svg').attr('width', width).attr('height', height);\n      var projection = d3.geoMercator().scale(1).translate([0, 0]);\n      var path = d3.geoPath().projection(projection);\n      var bounds = path.bounds(_map);\n      var widthScale = (bounds[1][0] - bounds[0][0]) / width;\n      var heightScale = (bounds[1][1] - bounds[0][1]) / height;\n      var scale = 1 / Math.max(widthScale, heightScale);\n      var xoffset = width / 2 - scale * (bounds[1][0] + bounds[0][0]) / 2 + 10;\n      var yoffset = height / 2 - scale * (bounds[1][1] + bounds[0][1]) / 2 + 80;\n      var offset = [xoffset, yoffset];\n      projection.scale(scale).translate(offset);\n      var map = svg.append('g').selectAll('path').data(_map.features).enter().append('path').attr('d', path);\n      var mapInfo = [{\n        \"name\": \"서울\",\n        \"lat\": \"37.532600\",\n        \"lon\": \"127.024612\"\n      }, {\n        \"name\": \"대전\",\n        \"lat\": \"36.3730178\",\n        \"lon\": \"127.2483736\"\n      }];\n      var icons = svg.append('g').selectAll('svg').data(mapInfo).enter().append(\"svg:image\").attr(\"width\", 20).attr(\"height\", 20).attr('x', function (d) {\n        return projection([d.lon, d.lat])[0];\n      }).attr('y', function (d) {\n        return projection([d.lon, d.lat])[1];\n      }).attr('opacity', 1).attr(\"xlink:href\", require(\"../assets/grapefruit.svg\"));\n\n      var zoomed = function zoomed() {\n        map.attr('transform', d3.event.transform);\n        icons.attr('transform', d3.event.transform);\n      };\n\n      var zoom = d3.zoom().scaleExtent([1, 8]).on('zoom', zoomed);\n      svg.call(zoom);\n    }\n  }\n};",{"version":3,"sources":["Map.vue"],"names":[],"mappings":"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","sourcesContent":["    \n<template>\n  <div class=\"Map\"> \n    <div class=\"d3 card\"></div>\n  </div>\n</template>\n<script>\n  import * as d3 from 'd3';\n  import * as topojson from 'topojson'; \n  export default {\n    name: 'Map', \n    mounted() {\n      this.draw();\n    },\n    methods: {\n      draw() { \n        const koreaMap = require('../assets/skorea-provinces-2018-topo-simple.json');\n        const _map = topojson.feature(koreaMap, koreaMap.objects.skorea_provinces_2018_geo); \n\n        const width = 300;\n        const height = 400;\n        const svg = d3\n          .select('.d3')\n          .append('svg')\n          .attr('width', width).attr('height', height);\n\n        const projection = d3.geoMercator()\n          .scale(1)\n          .translate([0, 0]);\n\n        const path = d3.geoPath().projection(projection);\n        const bounds = path.bounds(_map);\n\n        const widthScale = (bounds[1][0] - bounds[0][0]) / width;\n        const heightScale = (bounds[1][1] - bounds[0][1]) / height;\n        const scale = 1 / Math.max(widthScale, heightScale);\n\n        const xoffset = width / 2 - scale * (bounds[1][0] + bounds[0][0]) / 2 + 10;\n        const yoffset = height / 2 - scale * (bounds[1][1] + bounds[0][1]) / 2 + 80;\n        const offset = [xoffset, yoffset];\n        projection.scale(scale).translate(offset);\n\n        const map = svg.append('g')\n          .selectAll('path').data(_map.features)\n          .enter().append('path')\n          .attr('d', path);\n          \n        const mapInfo = [{\n            \"name\": \"서울\",\n            \"lat\": \"37.532600\",\n            \"lon\": \"127.024612\"\n          },\n          {\n            \"name\": \"대전\",\n            \"lat\": \"36.3730178\",\n            \"lon\": \"127.2483736\"\n          }\n        ]\n\n        const icons = svg.append('g').selectAll('svg')\n          .data(mapInfo)\n          .enter()\n          .append(\"svg:image\")\n          .attr(\"width\", 20)\n          .attr(\"height\", 20)\n          .attr('x', d => projection([d.lon, d.lat])[0])\n          .attr('y', d => projection([d.lon, d.lat])[1])\n          .attr('opacity', 1)\n          .attr(\"xlink:href\", require(\"../assets/grapefruit.svg\"))\n\n        const zoomed = () => {\n          map.attr('transform', d3.event.transform)\n          icons.attr('transform', d3.event.transform);\n        }\n        const zoom = d3.zoom().scaleExtent([1, 8]).on('zoom', zoomed)\n        svg.call(zoom)\n      }\n    }\n  }\n</script>\n<style>\n  .hello {\n    width: 100%;\n  }\n\n  .d3 {\n    background: #eee; \n    margin: 0 auto;\n    margin-top:1rem; \n  }\n  .d3:hover{\n    cursor: pointer; \n  }\n\n  .Map path {\n    fill: #ed8b70;\n    stroke: #de6a6c;\n  }\n</style>"],"sourceRoot":"src/views"}]}