{"remainingRequest":"/Users/juhongchul/Desktop/개발/MEVN/4장/sensor/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/juhongchul/Desktop/개발/MEVN/4장/sensor/src/components/Chart.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/juhongchul/Desktop/개발/MEVN/4장/sensor/src/components/Chart.vue","mtime":1565500390171},{"path":"/Users/juhongchul/Desktop/개발/MEVN/4장/sensor/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/juhongchul/Desktop/개발/MEVN/4장/sensor/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/juhongchul/Desktop/개발/MEVN/4장/sensor/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/juhongchul/Desktop/개발/MEVN/4장/sensor/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/juhongchul/Desktop/개발/MEVN/4장/sensor/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.Chart {}\n",{"version":3,"sources":["Chart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA","file":"Chart.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"Chart\">\n\n  </div>\n</template>\n\n<script>\n  import config from '../config'\n  import * as d3 from 'd3';\n  export default {\n    name: 'Chart',\n    props: {\n      _key: Number,\n      color: String\n    },\n    data() {\n      return {\n        drawSensor: []\n      }\n    },\n    mounted() {\n      this.draw();\n    },\n    methods: {\n      draw() {\n        //if (this.sensors.length < 10) return;\n        const xScale = d3.scaleLinear().domain([0, 10]).range([0, config.chartWidth])\n        const yScale = d3.scaleLinear().domain([0, 1]).range([0, config.chartHeight])\n\n        const line = d3.line().x((d, i) => xScale(i)).y(d => yScale(d.y)).curve(d3.curveMonotoneX)\n        // 8. An array of objects of length N. Each object has key -> value pair, the key being \"y\" and the value is a random number\n        const dataset = d3.range(n).map(d => {\n          \"y\": d3.randomUniform(1)()\n        })\n\n\n        // 1. Add the SVG to the page and employ #2\n        const svg = d3.select(\"body\").append(\"svg\")\n          .attr(\"width\", config.chartWidth + config.margin.left + config.margin.right)\n          .attr(\"height\", config.chartHeight + config.margin.top + config.margin.bottom)\n          .append(\"g\")\n          .attr(\"transform\", `translate(${config,margin.left},${config.margin.top})`);\n\n        // 3. Call the x axis in a group tag\n        svg.append(\"g\")\n          .attr(\"class\", \"x axis\")\n          .attr(\"transform\", `translate(0,${height})`)\n          .call(d3.axisBottom(xScale));\n\n        svg.append(\"g\")\n          .attr(\"class\", \"y axis\")\n          .call(d3.axisLeft(yScale));\n\n        svg.append(\"path\")\n          .datum(dataset)\n          .attr(\"class\", \"line\")\n          .attr(\"d\", line);\n\n        svg.selectAll(\".dot\")\n          .data(dataset)\n          .enter().append(\"circle\")\n          .attr(\"class\", \"dot\")\n          .attr(\"cx\", (d, i) => xScale(i))\n          .attr(\"cy\", (d) => yScale(d.y))\n          .attr(\"r\", 5).on(\"mouseover\", function (a, b, c) {\n            console.log(a, b, c)\n            this.attr('class', 'focus')\n          })\n\n      },\n      computed: {\n        ...mapState([\n          'sensors'\n        ])\n      }\n    }\n</script>\n\n<style>\n  .Chart {}\n</style>"]}]}