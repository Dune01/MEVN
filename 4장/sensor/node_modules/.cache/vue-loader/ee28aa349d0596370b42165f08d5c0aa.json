{"remainingRequest":"/Users/juhongchul/Desktop/개발/MEVN/4장/sensor/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/juhongchul/Desktop/개발/MEVN/4장/sensor/src/views/Map.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/juhongchul/Desktop/개발/MEVN/4장/sensor/src/views/Map.vue","mtime":1565499322060},{"path":"/Users/juhongchul/Desktop/개발/MEVN/4장/sensor/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/juhongchul/Desktop/개발/MEVN/4장/sensor/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/juhongchul/Desktop/개발/MEVN/4장/sensor/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/juhongchul/Desktop/개발/MEVN/4장/sensor/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport * as d3 from 'd3';\nimport * as topojson from 'topojson'; \nexport default {\n  name: 'Map', \n  mounted() {\n    this.draw();\n  },\n  methods: {\n    draw() { \n      const koreaMap = require('../assets/skorea-provinces-2018-topo-simple.json');\n      const _map = topojson.feature(koreaMap, koreaMap.objects.skorea_provinces_2018_geo); \n\n      const width = 600;\n      const height = 1000;\n      const svg = d3\n        .select('.d3')\n        .append('svg')\n        .attr('width', width).attr('height', height);\n\n      const projection = d3.geoMercator()\n        .scale(1)\n        .translate([0, 0]);\n\n      const path = d3.geoPath().projection(projection);\n      const bounds = path.bounds(_map);\n\n      const widthScale = (bounds[1][0] - bounds[0][0]) / width;\n      const heightScale = (bounds[1][1] - bounds[0][1]) / height;\n      const scale = 1 / Math.max(widthScale, heightScale);\n\n      const xoffset = width / 2 - scale * (bounds[1][0] + bounds[0][0]) / 2 + 10;\n      const yoffset = height / 2 - scale * (bounds[1][1] + bounds[0][1]) / 2 + 80;\n      const offset = [xoffset, yoffset];\n      projection.scale(scale).translate(offset);\n\n      const map = svg.append('g')\n        .selectAll('path').data(_map.features)\n        .enter().append('path')\n        .attr('d', path);\n        \n      const mapInfo = [{\n          \"name\": \"서울\",\n          \"lat\": \"37.532600\",\n          \"lon\": \"127.024612\"\n        },\n        {\n          \"name\": \"대전\",\n          \"lat\": \"36.3730178\",\n          \"lon\": \"127.2483736\"\n        }\n      ]\n\n      const icons = svg.append('g').selectAll('svg')\n        .data(mapInfo)\n        .enter()\n        .append(\"svg:image\")\n        .attr(\"width\", 50)\n        .attr(\"height\", 50)\n        .attr('x', d => projection([d.lon, d.lat])[0])\n        .attr('y', d => projection([d.lon, d.lat])[1])\n        .attr('opacity', 1)\n        .attr(\"xlink:href\", require(\"../assets/grapefruit.svg\"))\n\n      const zoomed = () => {\n        map.attr('transform', d3.event.transform)\n        icons.attr('transform', d3.event.transform);\n      }\n      const zoom = d3.zoom().scaleExtent([1, 8]).on('zoom', zoomed)\n      svg.call(zoom)\n    }\n  }\n}\n",{"version":3,"sources":["Map.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Map.vue","sourceRoot":"src/views","sourcesContent":["    \n<template>\n  <div class=\"Map\"> \n    <div class=\"d3\"></div>\n  </div>\n</template>\n<script>\n  import * as d3 from 'd3';\n  import * as topojson from 'topojson'; \n  export default {\n    name: 'Map', \n    mounted() {\n      this.draw();\n    },\n    methods: {\n      draw() { \n        const koreaMap = require('../assets/skorea-provinces-2018-topo-simple.json');\n        const _map = topojson.feature(koreaMap, koreaMap.objects.skorea_provinces_2018_geo); \n\n        const width = 600;\n        const height = 1000;\n        const svg = d3\n          .select('.d3')\n          .append('svg')\n          .attr('width', width).attr('height', height);\n\n        const projection = d3.geoMercator()\n          .scale(1)\n          .translate([0, 0]);\n\n        const path = d3.geoPath().projection(projection);\n        const bounds = path.bounds(_map);\n\n        const widthScale = (bounds[1][0] - bounds[0][0]) / width;\n        const heightScale = (bounds[1][1] - bounds[0][1]) / height;\n        const scale = 1 / Math.max(widthScale, heightScale);\n\n        const xoffset = width / 2 - scale * (bounds[1][0] + bounds[0][0]) / 2 + 10;\n        const yoffset = height / 2 - scale * (bounds[1][1] + bounds[0][1]) / 2 + 80;\n        const offset = [xoffset, yoffset];\n        projection.scale(scale).translate(offset);\n\n        const map = svg.append('g')\n          .selectAll('path').data(_map.features)\n          .enter().append('path')\n          .attr('d', path);\n          \n        const mapInfo = [{\n            \"name\": \"서울\",\n            \"lat\": \"37.532600\",\n            \"lon\": \"127.024612\"\n          },\n          {\n            \"name\": \"대전\",\n            \"lat\": \"36.3730178\",\n            \"lon\": \"127.2483736\"\n          }\n        ]\n\n        const icons = svg.append('g').selectAll('svg')\n          .data(mapInfo)\n          .enter()\n          .append(\"svg:image\")\n          .attr(\"width\", 50)\n          .attr(\"height\", 50)\n          .attr('x', d => projection([d.lon, d.lat])[0])\n          .attr('y', d => projection([d.lon, d.lat])[1])\n          .attr('opacity', 1)\n          .attr(\"xlink:href\", require(\"../assets/grapefruit.svg\"))\n\n        const zoomed = () => {\n          map.attr('transform', d3.event.transform)\n          icons.attr('transform', d3.event.transform);\n        }\n        const zoom = d3.zoom().scaleExtent([1, 8]).on('zoom', zoomed)\n        svg.call(zoom)\n      }\n    }\n  }\n</script>\n<style>\n  .hello {\n    width: 100%;\n  }\n\n  .d3 {\n    background: #eee;\n    width: 618px;\n    height: 1000px;\n    margin: 0 auto;\n  }\n\n  .Map path {\n    fill: #ed8b70;\n    stroke: #de6a6c;\n  }\n</style>"]}]}